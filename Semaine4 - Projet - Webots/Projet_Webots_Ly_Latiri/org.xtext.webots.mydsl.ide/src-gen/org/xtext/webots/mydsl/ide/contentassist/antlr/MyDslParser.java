/*
 * generated by Xtext 2.22.0
 */
package org.xtext.webots.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.webots.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.webots.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getActuatorAccess().getAlternatives(), "rule__Actuator__Alternatives");
			builder.put(grammarAccess.getBehaviorAccess().getAlternatives(), "rule__Behavior__Alternatives");
			builder.put(grammarAccess.getSensorAccess().getAlternatives(), "rule__Sensor__Alternatives");
			builder.put(grammarAccess.getEDoubleAccess().getAlternatives_4_0(), "rule__EDouble__Alternatives_4_0");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getRobotConfigurationAccess().getGroup(), "rule__RobotConfiguration__Group__0");
			builder.put(grammarAccess.getRobotConfigurationAccess().getGroup_2(), "rule__RobotConfiguration__Group_2__0");
			builder.put(grammarAccess.getRobotConfigurationAccess().getGroup_3(), "rule__RobotConfiguration__Group_3__0");
			builder.put(grammarAccess.getRobotConfigurationAccess().getGroup_7(), "rule__RobotConfiguration__Group_7__0");
			builder.put(grammarAccess.getRobotAccess().getGroup(), "rule__Robot__Group__0");
			builder.put(grammarAccess.getRobotAccess().getGroup_4(), "rule__Robot__Group_4__0");
			builder.put(grammarAccess.getRobotAccess().getGroup_4_3(), "rule__Robot__Group_4_3__0");
			builder.put(grammarAccess.getMissionAccess().getGroup(), "rule__Mission__Group__0");
			builder.put(grammarAccess.getMissionAccess().getGroup_7(), "rule__Mission__Group_7__0");
			builder.put(grammarAccess.getLeftMotorAccess().getGroup(), "rule__LeftMotor__Group__0");
			builder.put(grammarAccess.getRightMotorAccess().getGroup(), "rule__RightMotor__Group__0");
			builder.put(grammarAccess.getEscapeAccess().getGroup(), "rule__Escape__Group__0");
			builder.put(grammarAccess.getEscapeAccess().getGroup_3(), "rule__Escape__Group_3__0");
			builder.put(grammarAccess.getEscapeAccess().getGroup_3_3(), "rule__Escape__Group_3_3__0");
			builder.put(grammarAccess.getHomeAccess().getGroup(), "rule__Home__Group__0");
			builder.put(grammarAccess.getHomeAccess().getGroup_3(), "rule__Home__Group_3__0");
			builder.put(grammarAccess.getHomeAccess().getGroup_3_3(), "rule__Home__Group_3_3__0");
			builder.put(grammarAccess.getDistanceSensorAccess().getGroup(), "rule__DistanceSensor__Group__0");
			builder.put(grammarAccess.getLightSensorAccess().getGroup(), "rule__LightSensor__Group__0");
			builder.put(grammarAccess.getEDoubleAccess().getGroup(), "rule__EDouble__Group__0");
			builder.put(grammarAccess.getEDoubleAccess().getGroup_4(), "rule__EDouble__Group_4__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getRobotConfigurationAccess().getMAX_SPEEDAssignment_2_2(), "rule__RobotConfiguration__MAX_SPEEDAssignment_2_2");
			builder.put(grammarAccess.getRobotConfigurationAccess().getTIME_STEPAssignment_3_2(), "rule__RobotConfiguration__TIME_STEPAssignment_3_2");
			builder.put(grammarAccess.getRobotConfigurationAccess().getRobotAssignment_6(), "rule__RobotConfiguration__RobotAssignment_6");
			builder.put(grammarAccess.getRobotConfigurationAccess().getMissionAssignment_7_2(), "rule__RobotConfiguration__MissionAssignment_7_2");
			builder.put(grammarAccess.getRobotAccess().getNameAssignment_2(), "rule__Robot__NameAssignment_2");
			builder.put(grammarAccess.getRobotAccess().getActuatorsAssignment_4_2(), "rule__Robot__ActuatorsAssignment_4_2");
			builder.put(grammarAccess.getRobotAccess().getActuatorsAssignment_4_3_1(), "rule__Robot__ActuatorsAssignment_4_3_1");
			builder.put(grammarAccess.getMissionAccess().getFinishedAssignment_0(), "rule__Mission__FinishedAssignment_0");
			builder.put(grammarAccess.getMissionAccess().getNameAssignment_2(), "rule__Mission__NameAssignment_2");
			builder.put(grammarAccess.getMissionAccess().getBehaviorsAssignment_6(), "rule__Mission__BehaviorsAssignment_6");
			builder.put(grammarAccess.getMissionAccess().getBehaviorsAssignment_7_1(), "rule__Mission__BehaviorsAssignment_7_1");
			builder.put(grammarAccess.getLeftMotorAccess().getNameAssignment_2(), "rule__LeftMotor__NameAssignment_2");
			builder.put(grammarAccess.getRightMotorAccess().getNameAssignment_2(), "rule__RightMotor__NameAssignment_2");
			builder.put(grammarAccess.getEscapeAccess().getSensorsAssignment_3_2(), "rule__Escape__SensorsAssignment_3_2");
			builder.put(grammarAccess.getEscapeAccess().getSensorsAssignment_3_3_1(), "rule__Escape__SensorsAssignment_3_3_1");
			builder.put(grammarAccess.getHomeAccess().getSensorsAssignment_3_2(), "rule__Home__SensorsAssignment_3_2");
			builder.put(grammarAccess.getHomeAccess().getSensorsAssignment_3_3_1(), "rule__Home__SensorsAssignment_3_3_1");
			builder.put(grammarAccess.getDistanceSensorAccess().getNameAssignment_2(), "rule__DistanceSensor__NameAssignment_2");
			builder.put(grammarAccess.getLightSensorAccess().getNameAssignment_2(), "rule__LightSensor__NameAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
