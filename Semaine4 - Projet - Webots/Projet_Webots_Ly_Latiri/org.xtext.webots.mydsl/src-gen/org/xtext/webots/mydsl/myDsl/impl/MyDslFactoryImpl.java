/**
 * generated by Xtext 2.22.0
 */
package org.xtext.webots.mydsl.myDsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.webots.mydsl.myDsl.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyDslFactoryImpl extends EFactoryImpl implements MyDslFactory
{
  /**
	 * Creates the default factory implementation.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public static MyDslFactory init()
  {
		try {
			MyDslFactory theMyDslFactory = (MyDslFactory)EPackage.Registry.INSTANCE.getEFactory(MyDslPackage.eNS_URI);
			if (theMyDslFactory != null) {
				return theMyDslFactory;
			}
		}
		catch (Exception exception) {
			EcorePlugin.INSTANCE.log(exception);
		}
		return new MyDslFactoryImpl();
	}

  /**
	 * Creates an instance of the factory.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public MyDslFactoryImpl()
  {
		super();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EObject create(EClass eClass)
  {
		switch (eClass.getClassifierID()) {
			case MyDslPackage.ROBOT_CONFIGURATION: return createRobotConfiguration();
			case MyDslPackage.ACTUATOR: return createActuator();
			case MyDslPackage.BEHAVIOR: return createBehavior();
			case MyDslPackage.SENSOR: return createSensor();
			case MyDslPackage.ROBOT: return createRobot();
			case MyDslPackage.MISSION: return createMission();
			case MyDslPackage.LEFT_MOTOR: return createLeftMotor();
			case MyDslPackage.RIGHT_MOTOR: return createRightMotor();
			case MyDslPackage.ESCAPE: return createEscape();
			case MyDslPackage.HOME: return createHome();
			case MyDslPackage.DISTANCE_SENSOR: return createDistanceSensor();
			case MyDslPackage.LIGHT_SENSOR: return createLightSensor();
			default:
				throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
		}
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public RobotConfiguration createRobotConfiguration()
  {
		RobotConfigurationImpl robotConfiguration = new RobotConfigurationImpl();
		return robotConfiguration;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Actuator createActuator()
  {
		ActuatorImpl actuator = new ActuatorImpl();
		return actuator;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Behavior createBehavior()
  {
		BehaviorImpl behavior = new BehaviorImpl();
		return behavior;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Sensor createSensor()
  {
		SensorImpl sensor = new SensorImpl();
		return sensor;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Robot createRobot()
  {
		RobotImpl robot = new RobotImpl();
		return robot;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Mission createMission()
  {
		MissionImpl mission = new MissionImpl();
		return mission;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public LeftMotor createLeftMotor()
  {
		LeftMotorImpl leftMotor = new LeftMotorImpl();
		return leftMotor;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public RightMotor createRightMotor()
  {
		RightMotorImpl rightMotor = new RightMotorImpl();
		return rightMotor;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Escape createEscape()
  {
		EscapeImpl escape = new EscapeImpl();
		return escape;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Home createHome()
  {
		HomeImpl home = new HomeImpl();
		return home;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public DistanceSensor createDistanceSensor()
  {
		DistanceSensorImpl distanceSensor = new DistanceSensorImpl();
		return distanceSensor;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public LightSensor createLightSensor()
  {
		LightSensorImpl lightSensor = new LightSensorImpl();
		return lightSensor;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public MyDslPackage getMyDslPackage()
  {
		return (MyDslPackage)getEPackage();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @deprecated
	 * @generated
	 */
  @Deprecated
  public static MyDslPackage getPackage()
  {
		return MyDslPackage.eINSTANCE;
	}

} //MyDslFactoryImpl
