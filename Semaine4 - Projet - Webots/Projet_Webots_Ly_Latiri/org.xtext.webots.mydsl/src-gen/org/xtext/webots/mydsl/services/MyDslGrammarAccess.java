/*
 * generated by Xtext 2.22.0
 */
package org.xtext.webots.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class RobotConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.webots.mydsl.MyDsl.RobotConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRobotConfigurationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cMAX_SPEEDKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cMAX_SPEEDAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cMAX_SPEEDEDoubleParserRuleCall_2_2_0 = (RuleCall)cMAX_SPEEDAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTIME_STEPKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cTIME_STEPAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cTIME_STEPEIntParserRuleCall_3_2_0 = (RuleCall)cTIME_STEPAssignment_3_2.eContents().get(0);
		private final Keyword cRobotKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRobotAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRobotRobotParserRuleCall_6_0 = (RuleCall)cRobotAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cMissionKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cColonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cMissionAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cMissionMissionParserRuleCall_7_2_0 = (RuleCall)cMissionAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//RobotConfiguration:
		//	'RobotConfiguration'
		//	'{' ('MAX_SPEED' ':' MAX_SPEED=EDouble)? ('TIME_STEP' ':' TIME_STEP=EInt)?
		//	'robot' ':' robot=Robot ('mission' ':' mission=Mission)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'RobotConfiguration' '{' ('MAX_SPEED' ':' MAX_SPEED=EDouble)? ('TIME_STEP' ':' TIME_STEP=EInt)? 'robot' ':' robot=Robot
		//('mission' ':' mission=Mission)? '}'
		public Group getGroup() { return cGroup; }
		
		//'RobotConfiguration'
		public Keyword getRobotConfigurationKeyword_0() { return cRobotConfigurationKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('MAX_SPEED' ':' MAX_SPEED=EDouble)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'MAX_SPEED'
		public Keyword getMAX_SPEEDKeyword_2_0() { return cMAX_SPEEDKeyword_2_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//MAX_SPEED=EDouble
		public Assignment getMAX_SPEEDAssignment_2_2() { return cMAX_SPEEDAssignment_2_2; }
		
		//EDouble
		public RuleCall getMAX_SPEEDEDoubleParserRuleCall_2_2_0() { return cMAX_SPEEDEDoubleParserRuleCall_2_2_0; }
		
		//('TIME_STEP' ':' TIME_STEP=EInt)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'TIME_STEP'
		public Keyword getTIME_STEPKeyword_3_0() { return cTIME_STEPKeyword_3_0; }
		
		//':'
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }
		
		//TIME_STEP=EInt
		public Assignment getTIME_STEPAssignment_3_2() { return cTIME_STEPAssignment_3_2; }
		
		//EInt
		public RuleCall getTIME_STEPEIntParserRuleCall_3_2_0() { return cTIME_STEPEIntParserRuleCall_3_2_0; }
		
		//'robot'
		public Keyword getRobotKeyword_4() { return cRobotKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//robot=Robot
		public Assignment getRobotAssignment_6() { return cRobotAssignment_6; }
		
		//Robot
		public RuleCall getRobotRobotParserRuleCall_6_0() { return cRobotRobotParserRuleCall_6_0; }
		
		//('mission' ':' mission=Mission)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'mission'
		public Keyword getMissionKeyword_7_0() { return cMissionKeyword_7_0; }
		
		//':'
		public Keyword getColonKeyword_7_1() { return cColonKeyword_7_1; }
		
		//mission=Mission
		public Assignment getMissionAssignment_7_2() { return cMissionAssignment_7_2; }
		
		//Mission
		public RuleCall getMissionMissionParserRuleCall_7_2_0() { return cMissionMissionParserRuleCall_7_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.webots.mydsl.MyDsl.Actuator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLeftMotorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRightMotorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Actuator:
		//	LeftMotor | RightMotor;
		@Override public ParserRule getRule() { return rule; }
		
		//LeftMotor | RightMotor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LeftMotor
		public RuleCall getLeftMotorParserRuleCall_0() { return cLeftMotorParserRuleCall_0; }
		
		//RightMotor
		public RuleCall getRightMotorParserRuleCall_1() { return cRightMotorParserRuleCall_1; }
	}
	public class BehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.webots.mydsl.MyDsl.Behavior");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEscapeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHomeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Behavior:
		//	Escape | Home;
		@Override public ParserRule getRule() { return rule; }
		
		//Escape | Home
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Escape
		public RuleCall getEscapeParserRuleCall_0() { return cEscapeParserRuleCall_0; }
		
		//Home
		public RuleCall getHomeParserRuleCall_1() { return cHomeParserRuleCall_1; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.webots.mydsl.MyDsl.Sensor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDistanceSensorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLightSensorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Sensor:
		//	DistanceSensor | LightSensor;
		@Override public ParserRule getRule() { return rule; }
		
		//DistanceSensor | LightSensor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DistanceSensor
		public RuleCall getDistanceSensorParserRuleCall_0() { return cDistanceSensorParserRuleCall_0; }
		
		//LightSensor
		public RuleCall getLightSensorParserRuleCall_1() { return cLightSensorParserRuleCall_1; }
	}
	public class RobotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.webots.mydsl.MyDsl.Robot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRobotAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRobotKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cActuatorsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cActuatorsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cActuatorsActuatorParserRuleCall_4_2_0 = (RuleCall)cActuatorsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cActuatorsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cActuatorsActuatorParserRuleCall_4_3_1_0 = (RuleCall)cActuatorsAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Robot:
		//	{Robot}
		//	'Robot'
		//	name=EString
		//	'{' ('actuators' ':' actuators+=Actuator ("," actuators+=Actuator)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Robot} 'Robot' name=EString '{' ('actuators' ':' actuators+=Actuator ("," actuators+=Actuator)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Robot}
		public Action getRobotAction_0() { return cRobotAction_0; }
		
		//'Robot'
		public Keyword getRobotKeyword_1() { return cRobotKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('actuators' ':' actuators+=Actuator ("," actuators+=Actuator)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'actuators'
		public Keyword getActuatorsKeyword_4_0() { return cActuatorsKeyword_4_0; }
		
		//':'
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }
		
		//actuators+=Actuator
		public Assignment getActuatorsAssignment_4_2() { return cActuatorsAssignment_4_2; }
		
		//Actuator
		public RuleCall getActuatorsActuatorParserRuleCall_4_2_0() { return cActuatorsActuatorParserRuleCall_4_2_0; }
		
		//("," actuators+=Actuator)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//actuators+=Actuator
		public Assignment getActuatorsAssignment_4_3_1() { return cActuatorsAssignment_4_3_1; }
		
		//Actuator
		public RuleCall getActuatorsActuatorParserRuleCall_4_3_1_0() { return cActuatorsActuatorParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class MissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.webots.mydsl.MyDsl.Mission");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFinishedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cFinishedFinishedKeyword_0_0 = (Keyword)cFinishedAssignment_0.eContents().get(0);
		private final Keyword cMissionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cBehaviorsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBehaviorsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBehaviorsBehaviorParserRuleCall_6_0 = (RuleCall)cBehaviorsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cBehaviorsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cBehaviorsBehaviorParserRuleCall_7_1_0 = (RuleCall)cBehaviorsAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Mission:
		//	finished?='finished'?
		//	'Mission'
		//	name=EString
		//	'{'
		//	'behaviors' ':' behaviors+=Behavior ("," behaviors+=Behavior)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//finished?='finished'? 'Mission' name=EString '{' 'behaviors' ':' behaviors+=Behavior ("," behaviors+=Behavior)* '}'
		public Group getGroup() { return cGroup; }
		
		//finished?='finished'?
		public Assignment getFinishedAssignment_0() { return cFinishedAssignment_0; }
		
		//'finished'
		public Keyword getFinishedFinishedKeyword_0_0() { return cFinishedFinishedKeyword_0_0; }
		
		//'Mission'
		public Keyword getMissionKeyword_1() { return cMissionKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'behaviors'
		public Keyword getBehaviorsKeyword_4() { return cBehaviorsKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//behaviors+=Behavior
		public Assignment getBehaviorsAssignment_6() { return cBehaviorsAssignment_6; }
		
		//Behavior
		public RuleCall getBehaviorsBehaviorParserRuleCall_6_0() { return cBehaviorsBehaviorParserRuleCall_6_0; }
		
		//("," behaviors+=Behavior)*
		public Group getGroup_7() { return cGroup_7; }
		
		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//behaviors+=Behavior
		public Assignment getBehaviorsAssignment_7_1() { return cBehaviorsAssignment_7_1; }
		
		//Behavior
		public RuleCall getBehaviorsBehaviorParserRuleCall_7_1_0() { return cBehaviorsBehaviorParserRuleCall_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class LeftMotorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.webots.mydsl.MyDsl.LeftMotor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLeftMotorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftMotorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//LeftMotor:
		//	{LeftMotor}
		//	'LeftMotor'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{LeftMotor} 'LeftMotor' name=EString
		public Group getGroup() { return cGroup; }
		
		//{LeftMotor}
		public Action getLeftMotorAction_0() { return cLeftMotorAction_0; }
		
		//'LeftMotor'
		public Keyword getLeftMotorKeyword_1() { return cLeftMotorKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class RightMotorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.webots.mydsl.MyDsl.RightMotor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRightMotorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRightMotorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//RightMotor:
		//	{RightMotor}
		//	'RightMotor'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{RightMotor} 'RightMotor' name=EString
		public Group getGroup() { return cGroup; }
		
		//{RightMotor}
		public Action getRightMotorAction_0() { return cRightMotorAction_0; }
		
		//'RightMotor'
		public Keyword getRightMotorKeyword_1() { return cRightMotorKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class EscapeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.webots.mydsl.MyDsl.Escape");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEscapeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEscapeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSensorsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cSensorsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cSensorsSensorParserRuleCall_3_2_0 = (RuleCall)cSensorsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cSensorsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cSensorsSensorParserRuleCall_3_3_1_0 = (RuleCall)cSensorsAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Escape:
		//	{Escape}
		//	'Escape'
		//	'{' ('sensors' ':' sensors+=Sensor ("," sensors+=Sensor)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Escape} 'Escape' '{' ('sensors' ':' sensors+=Sensor ("," sensors+=Sensor)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Escape}
		public Action getEscapeAction_0() { return cEscapeAction_0; }
		
		//'Escape'
		public Keyword getEscapeKeyword_1() { return cEscapeKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('sensors' ':' sensors+=Sensor ("," sensors+=Sensor)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'sensors'
		public Keyword getSensorsKeyword_3_0() { return cSensorsKeyword_3_0; }
		
		//':'
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }
		
		//sensors+=Sensor
		public Assignment getSensorsAssignment_3_2() { return cSensorsAssignment_3_2; }
		
		//Sensor
		public RuleCall getSensorsSensorParserRuleCall_3_2_0() { return cSensorsSensorParserRuleCall_3_2_0; }
		
		//("," sensors+=Sensor)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//sensors+=Sensor
		public Assignment getSensorsAssignment_3_3_1() { return cSensorsAssignment_3_3_1; }
		
		//Sensor
		public RuleCall getSensorsSensorParserRuleCall_3_3_1_0() { return cSensorsSensorParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class HomeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.webots.mydsl.MyDsl.Home");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHomeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHomeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSensorsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cSensorsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cSensorsSensorParserRuleCall_3_2_0 = (RuleCall)cSensorsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cSensorsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cSensorsSensorParserRuleCall_3_3_1_0 = (RuleCall)cSensorsAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Home:
		//	{Home}
		//	'Home'
		//	'{' ('sensors' ':' sensors+=Sensor ("," sensors+=Sensor)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Home} 'Home' '{' ('sensors' ':' sensors+=Sensor ("," sensors+=Sensor)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Home}
		public Action getHomeAction_0() { return cHomeAction_0; }
		
		//'Home'
		public Keyword getHomeKeyword_1() { return cHomeKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('sensors' ':' sensors+=Sensor ("," sensors+=Sensor)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'sensors'
		public Keyword getSensorsKeyword_3_0() { return cSensorsKeyword_3_0; }
		
		//':'
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }
		
		//sensors+=Sensor
		public Assignment getSensorsAssignment_3_2() { return cSensorsAssignment_3_2; }
		
		//Sensor
		public RuleCall getSensorsSensorParserRuleCall_3_2_0() { return cSensorsSensorParserRuleCall_3_2_0; }
		
		//("," sensors+=Sensor)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//sensors+=Sensor
		public Assignment getSensorsAssignment_3_3_1() { return cSensorsAssignment_3_3_1; }
		
		//Sensor
		public RuleCall getSensorsSensorParserRuleCall_3_3_1_0() { return cSensorsSensorParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DistanceSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.webots.mydsl.MyDsl.DistanceSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDistanceSensorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDistanceSensorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//DistanceSensor:
		//	{DistanceSensor}
		//	'DistanceSensor'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{DistanceSensor} 'DistanceSensor' name=EString
		public Group getGroup() { return cGroup; }
		
		//{DistanceSensor}
		public Action getDistanceSensorAction_0() { return cDistanceSensorAction_0; }
		
		//'DistanceSensor'
		public Keyword getDistanceSensorKeyword_1() { return cDistanceSensorKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class LightSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.webots.mydsl.MyDsl.LightSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLightSensorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLightSensorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//LightSensor:
		//	{LightSensor}
		//	'LightSensor'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{LightSensor} 'LightSensor' name=EString
		public Group getGroup() { return cGroup; }
		
		//{LightSensor}
		public Action getLightSensorAction_0() { return cLightSensorAction_0; }
		
		//'LightSensor'
		public Keyword getLightSensorKeyword_1() { return cLightSensorKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.webots.mydsl.MyDsl.EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EDouble:
		//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E' | 'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E' | 'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('E' | 'e')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.webots.mydsl.MyDsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.webots.mydsl.MyDsl.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.webots.mydsl.MyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private final RobotConfigurationElements pRobotConfiguration;
	private final ActuatorElements pActuator;
	private final BehaviorElements pBehavior;
	private final SensorElements pSensor;
	private final RobotElements pRobot;
	private final MissionElements pMission;
	private final LeftMotorElements pLeftMotor;
	private final RightMotorElements pRightMotor;
	private final EscapeElements pEscape;
	private final HomeElements pHome;
	private final DistanceSensorElements pDistanceSensor;
	private final LightSensorElements pLightSensor;
	private final EDoubleElements pEDouble;
	private final EIntElements pEInt;
	private final EBooleanElements pEBoolean;
	private final EStringElements pEString;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRobotConfiguration = new RobotConfigurationElements();
		this.pActuator = new ActuatorElements();
		this.pBehavior = new BehaviorElements();
		this.pSensor = new SensorElements();
		this.pRobot = new RobotElements();
		this.pMission = new MissionElements();
		this.pLeftMotor = new LeftMotorElements();
		this.pRightMotor = new RightMotorElements();
		this.pEscape = new EscapeElements();
		this.pHome = new HomeElements();
		this.pDistanceSensor = new DistanceSensorElements();
		this.pLightSensor = new LightSensorElements();
		this.pEDouble = new EDoubleElements();
		this.pEInt = new EIntElements();
		this.pEBoolean = new EBooleanElements();
		this.pEString = new EStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.webots.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RobotConfiguration:
	//	'RobotConfiguration'
	//	'{' ('MAX_SPEED' ':' MAX_SPEED=EDouble)? ('TIME_STEP' ':' TIME_STEP=EInt)?
	//	'robot' ':' robot=Robot ('mission' ':' mission=Mission)?
	//	'}';
	public RobotConfigurationElements getRobotConfigurationAccess() {
		return pRobotConfiguration;
	}
	
	public ParserRule getRobotConfigurationRule() {
		return getRobotConfigurationAccess().getRule();
	}
	
	//Actuator:
	//	LeftMotor | RightMotor;
	public ActuatorElements getActuatorAccess() {
		return pActuator;
	}
	
	public ParserRule getActuatorRule() {
		return getActuatorAccess().getRule();
	}
	
	//Behavior:
	//	Escape | Home;
	public BehaviorElements getBehaviorAccess() {
		return pBehavior;
	}
	
	public ParserRule getBehaviorRule() {
		return getBehaviorAccess().getRule();
	}
	
	//Sensor:
	//	DistanceSensor | LightSensor;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//Robot:
	//	{Robot}
	//	'Robot'
	//	name=EString
	//	'{' ('actuators' ':' actuators+=Actuator ("," actuators+=Actuator)*)?
	//	'}';
	public RobotElements getRobotAccess() {
		return pRobot;
	}
	
	public ParserRule getRobotRule() {
		return getRobotAccess().getRule();
	}
	
	//Mission:
	//	finished?='finished'?
	//	'Mission'
	//	name=EString
	//	'{'
	//	'behaviors' ':' behaviors+=Behavior ("," behaviors+=Behavior)*
	//	'}';
	public MissionElements getMissionAccess() {
		return pMission;
	}
	
	public ParserRule getMissionRule() {
		return getMissionAccess().getRule();
	}
	
	//LeftMotor:
	//	{LeftMotor}
	//	'LeftMotor'
	//	name=EString;
	public LeftMotorElements getLeftMotorAccess() {
		return pLeftMotor;
	}
	
	public ParserRule getLeftMotorRule() {
		return getLeftMotorAccess().getRule();
	}
	
	//RightMotor:
	//	{RightMotor}
	//	'RightMotor'
	//	name=EString;
	public RightMotorElements getRightMotorAccess() {
		return pRightMotor;
	}
	
	public ParserRule getRightMotorRule() {
		return getRightMotorAccess().getRule();
	}
	
	//Escape:
	//	{Escape}
	//	'Escape'
	//	'{' ('sensors' ':' sensors+=Sensor ("," sensors+=Sensor)*)?
	//	'}';
	public EscapeElements getEscapeAccess() {
		return pEscape;
	}
	
	public ParserRule getEscapeRule() {
		return getEscapeAccess().getRule();
	}
	
	//Home:
	//	{Home}
	//	'Home'
	//	'{' ('sensors' ':' sensors+=Sensor ("," sensors+=Sensor)*)?
	//	'}';
	public HomeElements getHomeAccess() {
		return pHome;
	}
	
	public ParserRule getHomeRule() {
		return getHomeAccess().getRule();
	}
	
	//DistanceSensor:
	//	{DistanceSensor}
	//	'DistanceSensor'
	//	name=EString;
	public DistanceSensorElements getDistanceSensorAccess() {
		return pDistanceSensor;
	}
	
	public ParserRule getDistanceSensorRule() {
		return getDistanceSensorAccess().getRule();
	}
	
	//LightSensor:
	//	{LightSensor}
	//	'LightSensor'
	//	name=EString;
	public LightSensorElements getLightSensorAccess() {
		return pLightSensor;
	}
	
	public ParserRule getLightSensorRule() {
		return getLightSensorAccess().getRule();
	}
	
	//EDouble:
	//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	//EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EBoolean:
	//	'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
